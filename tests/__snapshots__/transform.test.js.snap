// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`/Users/azz/code/types-b-gone/tests/convert/enum.ts 1`] = `
enum Enum {
  A = 1,
  B,
  C
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
const Enum = __enum(["A", 1], "B", "C");
`;

exports[`/Users/azz/code/types-b-gone/tests/sanity/javascript.js 1`] = `
"directive";

function f() {
  return y;
}

class X {
  constructor(...args) {
    super(...args);
  }

  method() {
    return y;
  }
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"directive";

function f() {
    return y;
}

class X {
    constructor(...args) {
        super(...args);
    }

    method() {
        return y;
    }
}
`;

exports[`/Users/azz/code/types-b-gone/tests/strip/functions.ts 1`] = `
function f<T>(a: number, b: (x) => y): void {}

declare function foo() {
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function f(a, b) {}
`;

exports[`/Users/azz/code/types-b-gone/tests/strip/generics.ts 1`] = `
class X extends Y<T> {}

class X<T> extends Y {}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class X extends Y {}
class X extends Y {}
`;

exports[`/Users/azz/code/types-b-gone/tests/strip/interface.ts 1`] = `
interface Foo {
  bar: string;
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

`;

exports[`/Users/azz/code/types-b-gone/tests/strip/typeAnnotation.ts 1`] = `
var x: number;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
var x;
`;
